version: "2"
name: test /authors
vars:
  mysql.url: "filip:password@(localhost:4450)/db"
  api.url: "http://localhost:8081"

testcases:
- name: clean db
  steps:
    - type: sql
      driver: mysql
      dsn: "{{.mysql.url}}"
      commands:
        - "SET FOREIGN_KEY_CHECKS = 0;"
        - "TRUNCATE authors_books;"
        - "TRUNCATE books;"
        - "TRUNCATE authors;"
        - "SET FOREIGN_KEY_CHECKS = 1;"

- name: init db
  steps:
    - type: sql
      driver: mysql
      dsn: "{{.mysql.url}}"
      commands:
        - "INSERT INTO `authors` (`Lastname`, `Firstname`, `photo`) VALUES ('Rowling', 'J.K.', 'rowling.jpg')"
        - "INSERT INTO `authors` (`Lastname`, `Firstname`, `photo`) VALUES ('Doe', 'John', 'john.jpg')"
        - "INSERT INTO `books` (`title`, `photo`) VALUES ('Harry Potter', 'hp.jpg')"
        - "INSERT INTO `books` (`title`, `photo`) VALUES ('The Hobbit', 'hobbit.jpg')"
        - "INSERT INTO `authors_books` (`author_id`, `book_id`) VALUES (1, 1)" # Rowling and Harry Potter
        - "INSERT INTO `authors_books` (`author_id`, `book_id`) VALUES (2, 2)" # Doe and The Hobbit


- name: create author
  steps:
    - type: http
      method: POST
      url: "{{.api.url}}/authors/new"
      body: >
        {"firstname": "John", "lastname": "Doe"}
      headers: 
        Content-Type: application/json
      assertions:
        - result.statuscode ShouldEqual 201
        - result.bodyjson ShouldContainKey id

- name: create author missing fields
  steps:
    - type: http
      method: POST
      url: "{{.api.url}}/authors/new"
      body: >
        {"firstname": "", "lastname": ""}
      headers: 
        Content-Type: application/json
      assertions:
        - result.statuscode ShouldEqual 400
        - result.body ShouldContainSubstring "Firstname and Lastname are required fields"

- name: create author invalid JSON
  steps:
    - type: http
      method: POST
      url: "{{.api.url}}/authors/new"
      body: >
        {invalid-json}
      headers: 
        Content-Type: application/json
      assertions:
        - result.statuscode ShouldEqual 400
        - result.body ShouldContainSubstring "Invalid JSON data"

- name: validate GetAuthors
  steps:
    - type: http
      method: GET
      url: "{{.api.url}}/authors"
      assertions:
        - result.statuscode ShouldEqual 200

    - type: exec
      command: /bin/bash
      script: |
        user='{{result.body}}'
        
        id=$(echo "$user" | jq -r '.id')
        firstname=$(echo "$user" | jq -r '.firstname')
        lastname=$(echo "$user" | jq -r '.lastname')
        photo=$(echo "$user" | jq -r '.photo')

        if [[ -z "$id" ]]; then
          echo "Field 'id' is missing or empty"
          exit 1
        fi

        if [[ -z "$firstname" ]]; then
          echo "Field 'firstname' is missing or empty"
          exit 1
        fi

        if [[ -z "$lastname" ]]; then
          echo "Field 'lastname' is missing or empty"
          exit 1
        fi

        if [[ -z "$photo" ]]; then
          echo "Field 'photo' is missing or empty"
          exit 1
        fi
        echo "Author validation passed."

- name: search authors 
  steps:
    - type: http
      method: GET
      url: "{{.api.url}}/authors?query=John"
      headers: 
        Content-Type: application/json
      assertions:
        - result.statuscode ShouldEqual 200
        - result.body ShouldContainSubstring id
        - result.body ShouldContainSubstring lastname
        - result.body ShouldContainSubstring firstname
        - result.body ShouldContainSubstring photo
        - result.body ShouldContainSubstring "John"
        - result.body ShouldContainSubstring "Doe"
        - result.bodyjson ShouldNotBeNil

- name: search authors with missing query parameter
  steps:
    - type: http
      method: GET
      url: "{{.api.url}}/search_authors"
      assertions:
        - result.statuscode ShouldEqual 400
        - result.body ShouldContainSubstring "Query parameter is required"
